name: CI

on:
  push:
    branches: [main]
    paths:
      - ".config/**"
      - ".github/workflows/*"
      - "bun.lockb"
      - "package.json"
      - "package/**"
      - "api/**"
      - "web/**"
      - "cli/**"
  pull_request:
    branches: [main]
    paths:
      - ".config/**"
      - ".github/workflows/*"
      - "bun.lockb"
      - "package.json"
      - "package/**"
      - "api/**"
      - "web/**"
      - "cli/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-package:
    name: üì¶ Test Package
    runs-on: ubuntu-latest
    outputs:
      package-changed: ${{ steps.changes.outputs.package }}
      api-changed: ${{ steps.changes.outputs.api }}
      web-changed: ${{ steps.changes.outputs.web }}
      cli-changed: ${{ steps.changes.outputs.cli }}

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üîç Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            package:
              - 'package/**'
            api:
              - 'api/**'
            web:
              - 'web/**'
            cli:
              - 'cli/**'

      - name: ‚ö° Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üíæ Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            .bun
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lockb') }}

      - name: üì¶ Install dependencies
        working-directory: package
        run: bun install

      - name: üßπ Lint and Format
        run: bun check

      - name: üß™ Run package tests
        working-directory: package
        run: bun test

      - name: üìä Generate test coverage
        working-directory: package
        run: bun test --coverage

      - name: üì§ Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./package/coverage/lcov.info
          flags: package
          name: package-coverage
          fail_ci_if_error: false

      - name: üèóÔ∏è Build package
        working-directory: package
        run: bun run build

      - name: üß™ Run benchmark tests
        working-directory: package
        run: bun run bench
        continue-on-error: true

  test-api:
    name: üöÄ Test API
    runs-on: ubuntu-latest
    needs: test-package
    if: needs.test-package.outputs.api-changed == 'true' || needs.test-package.outputs.package-changed == 'true' || contains(github.event.head_commit.message, '[test-api]')

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: ‚ö° Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üíæ Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .bun
            node_modules
          key: ${{ runner.os }}-bun-${{ hashFiles('bun.lockb') }}

      - name: üì¶ Install package dependencies
        working-directory: package
        run: bun install

      - name: üèóÔ∏è Build package
        working-directory: package
        run: bun run build

      - name: üì¶ Install API dependencies
        working-directory: api
        run: bun install

      - name: üîß Lint API
        working-directory: api
        run: bun run lint
        continue-on-error: true

      - name: üèóÔ∏è Build API
        working-directory: api
        run: bun run build

      - name: üß™ Test API endpoints
        working-directory: api
        run: |
          # Start API in background
          bun run start &
          API_PID=$!

          # Wait for API to start
          sleep 5

          # Test health endpoint
          curl -f http://localhost:8080/health || exit 1

          # Kill API process
          kill $API_PID
        continue-on-error: true

  test-web:
    name: üåê Test Web
    runs-on: ubuntu-latest
    needs: test-package
    if: needs.test-package.outputs.web-changed == 'true' || needs.test-package.outputs.package-changed == 'true' || contains(github.event.head_commit.message, '[test-web]') || github.event_name == 'pull_request'

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: ‚ö° Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üíæ Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .bun
            node_modules
            web/.next
          key: ${{ runner.os }}-web-${{ hashFiles('bun.lockb') }}

      - name: üì¶ Install package dependencies
        working-directory: package
        run: bun install

      - name: üèóÔ∏è Build package
        working-directory: package
        run: bun run build

      - name: üì¶ Install web dependencies
        working-directory: web
        run: bun install

      - name: üîß Lint web
        working-directory: web
        run: bun run lint
        continue-on-error: true

      - name: üèóÔ∏è Build web
        working-directory: web
        run: bun run build

  test-cli:
    name: üñ•Ô∏è Test CLI
    runs-on: ubuntu-latest
    needs: test-package
    if: needs.test-package.outputs.cli-changed == 'true' || needs.test-package.outputs.package-changed == 'true' || contains(github.event.head_commit.message, '[test-cli]') || github.event_name == 'pull_request'

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: ‚ö° Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üíæ Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .bun
            node_modules
          key: ${{ runner.os }}-cli-${{ hashFiles('bun.lockb') }}

      - name: üì¶ Install package dependencies
        working-directory: package
        run: bun install

      - name: üèóÔ∏è Build package
        working-directory: package
        run: bun run build

      - name: üì¶ Install CLI dependencies
        working-directory: cli
        run: bun install

      - name: üèóÔ∏è Build CLI
        working-directory: cli
        run: bun run build

      - name: üß™ Test CLI commands
        working-directory: cli
        run: |
          # Test CLI help command
          bun run cli --help || exit 1

          # Test version command
          bun run cli --version || exit 1
        continue-on-error: true

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: ‚ö° Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: üì¶ Install workspace dependencies
        working-directory: package
        run: bun install

      - name: üîç Run dependency audit
        run: |
          bun audit || true

      - name: üõ°Ô∏è Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: üîç Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # summary:
  #   name: üìã CI Summary
  #   runs-on: ubuntu-latest
  #   needs: [test-package, test-api, test-web, test-cli, security-scan]
  #   if: always()

  #   steps:
  #     - name: üìä Check CI Results
  #       run: |
  #         echo "## üìã CI Summary" >> $GITHUB_STEP_SUMMARY
  #         echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
  #         echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
  #         echo "| üì¶ Package | ${{ needs.test-package.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
  #         echo "| üöÄ API | ${{ needs.test-api.result == 'success' && '‚úÖ Passed' || needs.test-api.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
  #         echo "| üåê Web | ${{ needs.test-web.result == 'success' && '‚úÖ Passed' || needs.test-web.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
  #         echo "| üñ•Ô∏è CLI | ${{ needs.test-cli.result == 'success' && '‚úÖ Passed' || needs.test-cli.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
  #         echo "| üîí Security | ${{ needs.security-scan.result == 'success' && '‚úÖ Passed' || needs.security-scan.result == 'skipped' && '‚è≠Ô∏è Skipped' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY

  #         # Check if any required job failed
  #         if [[ "${{ needs.test-package.result }}" == "failure" ]]; then
  #           echo "‚ùå CI failed due to package test failures"
  #           exit 1
  #         fi

  #         echo "‚úÖ CI completed successfully!"
